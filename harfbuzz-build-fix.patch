diff --git a/ports/harfbuzz/not_used.patch b/ports/harfbuzz/not_used.patch
new file mode 100644
index 0000000000..fb54a79a02
--- /dev/null
+++ b/ports/harfbuzz/not_used.patch
@@ -0,0 +1,21 @@
+diff --git a/src/hb-coretext.cc b/src/hb-coretext.cc
+index 4a34fe0..7aeabb2 100644
+--- a/src/hb-coretext.cc
++++ b/src/hb-coretext.cc
+@@ -857,7 +857,7 @@ resize_and_retry:
+     DEBUG_MSG (CORETEXT, nullptr, "Num runs: %d", num_runs);
+ 
+     buffer->len = 0;
+-    uint32_t status_and = ~0, status_or = 0;
++    uint32_t status_or = 0;
+     double advances_so_far = 0;
+     /* For right-to-left runs, CoreText returns the glyphs positioned such that
+      * any trailing whitespace is to the left of (0,0).  Adjust coordinate system
+@@ -878,7 +878,6 @@ resize_and_retry:
+       CTRunRef run = static_cast<CTRunRef>(CFArrayGetValueAtIndex (glyph_runs, i));
+       CTRunStatus run_status = CTRunGetStatus (run);
+       status_or  |= run_status;
+-      status_and &= run_status;
+       DEBUG_MSG (CORETEXT, run, "CTRunStatus: %x", run_status);
+       double run_advance = CTRunGetTypographicBounds (run, range_all, nullptr, nullptr, nullptr);
+       if (HB_DIRECTION_IS_VERTICAL (buffer->props.direction))
diff --git a/ports/harfbuzz/portfile.cmake b/ports/harfbuzz/portfile.cmake
index 055adaa155..9b69fdc154 100644
--- a/ports/harfbuzz/portfile.cmake
+++ b/ports/harfbuzz/portfile.cmake
@@ -14,6 +14,8 @@ vcpkg_from_github(
         glib-cmake.patch
         fix_include.patch
         icu.patch
+        supp_size.patch
+        not_used.patch
 )
 
 file(READ ${SOURCE_PATH}/CMakeLists.txt _contents)
diff --git a/ports/harfbuzz/supp_size.patch b/ports/harfbuzz/supp_size.patch
new file mode 100644
index 0000000000..0a2fc41327
--- /dev/null
+++ b/ports/harfbuzz/supp_size.patch
@@ -0,0 +1,29 @@
+diff --git a/src/hb-subset-cff1.cc b/src/hb-subset-cff1.cc
+index df322f8..35dae7b 100644
+--- a/src/hb-subset-cff1.cc
++++ b/src/hb-subset-cff1.cc
+@@ -402,7 +402,7 @@ struct cff_subset_plan {
+   void plan_subset_encoding (const OT::cff1::accelerator_subset_t &acc, hb_subset_plan_t *plan)
+   {
+     const Encoding *encoding = acc.encoding;
+-    unsigned int  size0, size1, supp_size;
++    unsigned int  size0, size1;
+     hb_codepoint_t  code, last_code = CFF_UNDEF_CODE;
+     hb_vector_t<hb_codepoint_t> supp_codes;
+ 
+@@ -412,7 +412,6 @@ struct cff_subset_plan {
+       return;
+     }
+ 
+-    supp_size = 0;
+     supp_codes.init ();
+ 
+     subset_enc_num_codes = plan->num_output_glyphs () - 1;
+@@ -448,7 +447,6 @@ struct cff_subset_plan {
+ 	  code_pair_t pair = { supp_codes[i], sid };
+ 	  subset_enc_supp_codes.push (pair);
+ 	}
+-	supp_size += SuppEncoding::static_size * supp_codes.length;
+       }
+     }
+     supp_codes.fini ();
