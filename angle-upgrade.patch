diff --git a/ports/angle/001-fix-uwp.patch b/ports/angle/001-fix-uwp.patch
deleted file mode 100644
index cba68d69b..000000000
--- a/ports/angle/001-fix-uwp.patch
+++ /dev/null
@@ -1,30 +0,0 @@
-diff --git a/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.cpp b/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.cpp
-index 7d3f078d6..fac057dd6 100644
---- a/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.cpp
-+++ b/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.cpp
-@@ -213,16 +213,20 @@ HRESULT GetCoreWindowSizeInPixels(const ComPtr<ABI::Windows::UI::Core::ICoreWind
- 
- static float GetLogicalDpi()
- {
--    ComPtr<ABI::Windows::Graphics::Display::IDisplayPropertiesStatics> displayProperties;
-+    ComPtr<ABI::Windows::Graphics::Display::IDisplayInformationStatics> displayInformationStatics;
-+    ComPtr<ABI::Windows::Graphics::Display::IDisplayInformation> displayInformation;
- 
-     if (SUCCEEDED(GetActivationFactory(
--            HStringReference(RuntimeClass_Windows_Graphics_Display_DisplayProperties).Get(),
--            displayProperties.GetAddressOf())))
-+            HStringReference(RuntimeClass_Windows_Graphics_Display_DisplayInformation).Get(),
-+            displayInformationStatics.GetAddressOf())))
-     {
-         float dpi = 96.0f;
--        if (SUCCEEDED(displayProperties->get_LogicalDpi(&dpi)))
-+        if (SUCCEEDED(displayInformationStatics->GetForCurrentView(&displayInformation)))
-         {
--            return dpi;
-+            if (SUCCEEDED(displayInformation->get_LogicalDpi(&dpi)))
-+            {
-+                return dpi;
-+            }
-         }
-     }
- 
diff --git a/ports/angle/001-fix-windows-define-far.patch b/ports/angle/001-fix-windows-define-far.patch
new file mode 100644
index 000000000..43a563ce2
--- /dev/null
+++ b/ports/angle/001-fix-windows-define-far.patch
@@ -0,0 +1,12 @@
+diff --git a/src/gpu_info_util/SystemInfo_win.cpp b/src/gpu_info_util/SystemInfo_win.cpp
+index f4bb137f2..0a94e457e 100644
+--- a/src/gpu_info_util/SystemInfo_win.cpp
++++ b/src/gpu_info_util/SystemInfo_win.cpp
+@@ -14,6 +14,7 @@
+ // Windows.h needs to be included first
+ #include <windows.h>
+ 
++#define FAR
+ #include <dxgi.h>
+ 
+ #include <array>
diff --git a/ports/angle/002-fix-builder-error.patch b/ports/angle/002-fix-builder-error.patch
deleted file mode 100644
index 8c632d1b0..000000000
--- a/ports/angle/002-fix-builder-error.patch
+++ /dev/null
@@ -1,28 +0,0 @@
-diff --git a/src/gpu_info_util/SystemInfo_win.cpp b/src/gpu_info_util/SystemInfo_win.cpp
-index f4bb137f2..86495013b 100644
---- a/src/gpu_info_util/SystemInfo_win.cpp
-+++ b/src/gpu_info_util/SystemInfo_win.cpp
-@@ -6,11 +6,6 @@
- 
- // SystemInfo_win.cpp: implementation of the Windows-specific parts of SystemInfo.h
- 
--#include "gpu_info_util/SystemInfo_internal.h"
--
--#include "common/debug.h"
--#include "common/string_utils.h"
--
- // Windows.h needs to be included first
- #include <windows.h>
- 
-@@ -19,6 +14,11 @@
- #include <array>
- #include <sstream>
- 
-+#include "gpu_info_util/SystemInfo_internal.h"
-+
-+#include "common/debug.h"
-+#include "common/string_utils.h"
-+
- namespace angle
- {
- 
diff --git a/ports/angle/002_Fix_glInvalidateFramebuffer_crash.patch b/ports/angle/002_Fix_glInvalidateFramebuffer_crash.patch
new file mode 100644
index 000000000..a52b16cb0
--- /dev/null
+++ b/ports/angle/002_Fix_glInvalidateFramebuffer_crash.patch
@@ -0,0 +1,14 @@
+diff -ruN a/src/libANGLE/Context.cpp b/src/libANGLE/Context.cpp
+--- a/src/libANGLE/Context.cpp	2019-09-16 09:46:58.000000000 +0100
++++ b/src/libANGLE/Context.cpp	2019-11-20 14:30:20.612384000 +0000
+@@ -4125,6 +4125,10 @@
+                                     GLsizei numAttachments,
+                                     const GLenum *attachments)
+ {
++    // VCC
++    // This call causes a crash. return added.
++    return;
++
+     // Only sync the FBO
+     ANGLE_CONTEXT_TRY(mState.syncDirtyObject(this, target));
+ 
diff --git a/ports/angle/CMakeLists.txt b/ports/angle/CMakeLists.txt
index b5c662f5c..d80cc5267 100644
--- a/ports/angle/CMakeLists.txt
+++ b/ports/angle/CMakeLists.txt
@@ -27,11 +27,6 @@ endif()
 set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS}")
 set(CMAKE_STATIC_LIBRARY_PREFIX "")
 
-if (WINDOWS_STORE)
-    set(WINRT_DEFINES -DANGLE_ENABLE_WINDOWS_STORE)
-else()
-    set(WINRT_DEFINES)
-endif()
 add_definitions(
     -D_CRT_SECURE_NO_DEPRECATE
     -D_SCL_SECURE_NO_WARNINGS
@@ -40,18 +35,15 @@ add_definitions(
     -DNOMINMAX
     -DANGLE_STANDALONE_BUILD
     -DANGLE_ENABLE_DEBUG_ANNOTATIONS
-    ${WINRT_DEFINES}
 )
 
 configure_file(commit.h include/id/commit.h COPYONLY)
-#include_directories(include src ${CMAKE_CURRENT_BINARY_DIR}/include)
-include_directories("$<INSTALL_INTERFACE:include>" "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>" "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>" "$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>")
+include_directories(include src ${CMAKE_CURRENT_BINARY_DIR}/include)
+
 ##########
 # angle::common
-if(WINDOWS_DESKTOP)
-    set(ANGLE_COMMON_PLATFORM_FILTER "_linux|_mac|_posix|_winuwp")
-elseif(WINDOWS_STORE)
-    set(ANGLE_COMMON_PLATFORM_FILTER "_linux|_mac|_posix|_win32")
+if(WIN32)
+    set(ANGLE_COMMON_PLATFORM_FILTER "_linux|_mac|_posix")
 elseif(LINUX)
     set(ANGLE_COMMON_PLATFORM_FILTER "_win|_mac")
 elseif(APPLE)
@@ -71,14 +63,14 @@ file(GLOB ANGLE_COMMON_SOURCES
     "src/common/third_party/smhasher/src/*.h"
     "src/common/third_party/smhasher/src/*.cpp")
 list(FILTER ANGLE_COMMON_SOURCES EXCLUDE REGEX "_unittest|event_tracer|${ANGLE_COMMON_PLATFORM_FILTER}")
-add_library(angle_common OBJECT ${ANGLE_COMMON_SOURCES})
-target_include_directories(angle_common PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/common/third_party/base>")
+add_library(angle_common STATIC ${ANGLE_COMMON_SOURCES})
+target_include_directories(angle_common PUBLIC src/common/third_party/base)
 add_library(angle::common ALIAS angle_common)
 
 ##########
 # angle::image_util
 file(GLOB ANGLE_IMAGE_UTIL_SOURCES "src/image_util/*.h" "src/image_util/*.inl" "src/image_util/*.cpp")
-add_library(angle_image_util OBJECT ${ANGLE_IMAGE_UTIL_SOURCES})
+add_library(angle_image_util STATIC ${ANGLE_IMAGE_UTIL_SOURCES})
 target_link_libraries(angle_image_util PRIVATE angle::common)
 add_library(angle::image_util ALIAS angle_image_util)
 
@@ -95,8 +87,7 @@ file(GLOB TRANSLATOR_SOURCES
     "src/compiler/translator/tree_util/*.cpp"
     "src/third_party/compiler/ArrayBoundsClamper.cpp"
 )
-list(FILTER TRANSLATOR_SOURCES EXCLUDE REGEX "_unittest")
-add_library(angle_translator OBJECT ${TRANSLATOR_SOURCES})
+add_library(angle_translator STATIC ${TRANSLATOR_SOURCES})
 target_compile_definitions(angle_translator PUBLIC
     -DANGLE_ENABLE_ESSL
     -DANGLE_ENABLE_GLSL
@@ -111,7 +102,7 @@ file(GLOB PREPROCESSOR_SOURCES
     "src/compiler/preprocessor/*.h"
     "src/compiler/preprocessor/*.cpp"
 )
-add_library(angle_preprocessor OBJECT ${PREPROCESSOR_SOURCES})
+add_library(angle_preprocessor STATIC ${PREPROCESSOR_SOURCES})
 target_link_libraries(angle_preprocessor PRIVATE angle::common)
 add_library(angle::preprocessor ALIAS angle_preprocessor)
 
@@ -132,16 +123,13 @@ if(WINDOWS_DESKTOP OR LINUX OR APPLE)
             "src/libANGLE/renderer/gl/cgl/*.cpp"
             "src/libANGLE/renderer/gl/cgl/*.inl"
             "src/libANGLE/renderer/gl/cgl/*.h"
-            "gpu_info_util/SystemInfo_macos.mm"
+            "gpu_info_util/SystemInfo_mac.mm"
         )
     elseif(LINUX)
         set(ANGLE_RENDERER_OPENGL_PLATFORM 
             "src/libANGLE/renderer/gl/glx/*.cpp"
             "src/libANGLE/renderer/gl/glx/*.inl"
             "src/libANGLE/renderer/gl/glx/*.h"
-            "src/libANGLE/renderer/gl/egl/*.cpp"
-            "src/libANGLE/renderer/gl/egl/*.inl"
-            "src/libANGLE/renderer/gl/egl/*.h"
         )
     endif()
 
@@ -154,7 +142,7 @@ if(WINDOWS_DESKTOP OR LINUX OR APPLE)
     )
     list(FILTER LIBANGLE_GL_SOURCES EXCLUDE REGEX "_unittest")
     add_library(angle_renderer_opengl INTERFACE)
-    target_sources(angle_renderer_opengl INTERFACE "$<BUILD_INTERFACE:${LIBANGLE_GL_SOURCES}>")
+    target_sources(angle_renderer_opengl INTERFACE ${LIBANGLE_GL_SOURCES})
     target_compile_definitions(angle_renderer_opengl INTERFACE -DANGLE_ENABLE_OPENGL)
     add_library(angle::renderer::opengl ALIAS angle_renderer_opengl)
 endif()
@@ -174,7 +162,7 @@ if(WIN32)
         set(LIBANGLE_D3D_WINRT_SOURCES ${LIBANGLE_D3D_SOURCES})
         list(FILTER LIBANGLE_D3D_WINRT_SOURCES INCLUDE REGEX "winrt")
         add_library(angle_renderer_winrt INTERFACE)
-        target_sources(angle_renderer_winrt INTERFACE "$<BUILD_INTERFACE:${LIBANGLE_D3D_WINRT_SOURCES}>")
+        target_sources(angle_renderer_winrt INTERFACE ${LIBANGLE_D3D_WINRT_SOURCES})
         add_library(angle::renderer::winrt ALIAS angle_renderer_winrt)
     endif()
 
@@ -184,7 +172,7 @@ if(WIN32)
         list(FILTER LIBANGLE_D3D_DESKTOP_SOURCES INCLUDE REGEX "d3d9|win32|converged")
         find_library(D3D9_LIB NAMES d3d9)
         add_library(angle_renderer_win32 INTERFACE)
-        target_sources(angle_renderer_win32 INTERFACE "$<BUILD_INTERFACE:${LIBANGLE_D3D_DESKTOP_SOURCES}>")
+        target_sources(angle_renderer_win32 INTERFACE ${LIBANGLE_D3D_DESKTOP_SOURCES})
         target_compile_definitions(angle_renderer_win32 INTERFACE -DANGLE_ENABLE_D3D9)
         target_link_libraries(angle_renderer_win32 INTERFACE ${D3D9_LIB})
         add_library(angle::renderer::win32 ALIAS angle_renderer_win32)
@@ -195,7 +183,7 @@ if(WIN32)
     find_library(DXGUID_LIB NAMES dxguid)
     find_library(D3D11_LIB NAMES d3d11)
     add_library(angle_renderer_d3d INTERFACE)
-    target_sources(angle_renderer_d3d INTERFACE "$<BUILD_INTERFACE:${LIBANGLE_D3D_SOURCES}>")
+    target_sources(angle_renderer_d3d INTERFACE ${LIBANGLE_D3D_SOURCES})
     target_compile_definitions(angle_renderer_d3d INTERFACE
         -DANGLE_ENABLE_D3D11
         "-DANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES={ \"d3dcompiler_47.dll\", \"d3dcompiler_46.dll\", \"d3dcompiler_43.dll\" }"
@@ -210,12 +198,12 @@ file(GLOB ANGLE_GPU_INFO_UTIL_SOURCES
     "src/gpu_info_util/SystemInfo_internal.h"
     "src/gpu_info_util/SystemInfo.cpp"
 )
-add_library(angle_gpu_info_util OBJECT ${ANGLE_GPU_INFO_UTIL_SOURCES})
+add_library(angle_gpu_info_util STATIC ${ANGLE_GPU_INFO_UTIL_SOURCES})
 if(WIN32)
     target_sources(angle_gpu_info_util PRIVATE "src/gpu_info_util/SystemInfo_win.cpp")
     target_link_libraries(angle_gpu_info_util PRIVATE setupapi.lib dxgi.lib)
 elseif(APPLE)
-    target_sources(angle_gpu_info_util PRIVATE "src/gpu_info_util/SystemInfo_macos.mm")
+    target_sources(angle_gpu_info_util PRIVATE "src/gpu_info_util/SystemInfo_mac.mm")
 	find_library(IOKit IOKit)
 	find_library(CoreFoundation CoreFoundation)
 	find_library(CoreGraphics CoreGraphics)
@@ -261,7 +249,12 @@ file(GLOB LIBANGLE_SOURCES
 
     ${LIBANGLE_SOURCES_PLATFORM}
 )
-list(FILTER LIBANGLE_SOURCES EXCLUDE REGEX "_unittest|glslang_wrapper|capture|FrameCapture\.cpp")
+list(FILTER LIBANGLE_SOURCES EXCLUDE REGEX "_unittest")
+
+# This fixes a compile error. The alternative would be to enable frame capture
+# (except we don't really need it). Source:
+# https://android.googlesource.com/device/generic/vulkan-cereal/+/refs/heads/master/third-party/angle/doc/CaptureAndReplay.md
+list(FILTER LIBANGLE_SOURCES EXCLUDE REGEX "src/libANGLE/FrameCapture.cpp")
 
 if(LINUX OR APPLE)
     set(LIBANGLE_RENDERER_PLATFORM
@@ -284,9 +277,6 @@ else()
 endif()
 
 if(LINUX)
-    find_package(X11)
-    include_directories(${X11_INCLUDE_DIR})
-    list(APPEND LIBANGLE_RENDERER_PLATFORM ${X11_LIBRARIES})
     set(LIBANGLE_RENDERER_COMPILEDEF
         -DANGLE_USE_X11
     )
@@ -303,24 +293,14 @@ target_link_libraries(libANGLE PRIVATE
     angle::preprocessor
     ${LIBANGLE_RENDERER_PLATFORM}
 )
-target_include_directories(libANGLE PRIVATE "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/third_party/khronos>")
+target_include_directories(libANGLE PRIVATE "src/third_party/khronos")
 target_compile_definitions(libANGLE
     PRIVATE -DANGLE_ENABLE_NULL
     PUBLIC 
         -DLIBANGLE_IMPLEMENTATION 
-        ${LIBANGLE_RENDERER_COMPILEDEF} 
-        -DANGLE_EXPORT=
-        -DANGLE_UTIL_EXPORT=
-        -DEGLAPI=
-        -DGL_APICALL=
-        -DGL_API=
+        ${LIBANGLE_RENDERER_COMPILEDEF}
 )
 add_library(angle::libANGLE ALIAS libANGLE)
-if(BUILD_SHARED_LIBS)
-    target_compile_definitions(libANGLE
-        PRIVATE -DLIBANGLE_UTIL_IMPLEMENTATION
-    )
-endif()
 
 ##########
 # libGLESv2
@@ -360,28 +340,12 @@ target_link_libraries(libGLESv2 PRIVATE angle::common angle::libANGLE)
 target_compile_definitions(libGLESv2
     PRIVATE -DLIBGLESV2_IMPLEMENTATION
     PUBLIC
-        "-DGL_GLES_PROTOTYPES=1"
-        "-DGL_GLEXT_PROTOTYPES"
-        "-DEGL_EGL_PROTOTYPES=1"
-        "-DEGL_EGLEXT_PROTOTYPES"
+        -DGL_GLEXT_PROTOTYPES
+        -DGL_API=
+        -DGL_APICALL=
+        -DEGLAPI=
+        -DGL_API=
 )
-if(BUILD_SHARED_LIBS)
-else()
-    if(WIN32)
-        target_compile_definitions(libGLESv2 PRIVATE
-                "-DGL_API="
-                "-DGL_APICALL="
-                "-DEGLAPI="
-        )
-    else()
-        target_compile_definitions(libGLESv2 PRIVATE
-                "-DGL_API=__attribute__((visibility(\"default\")))"
-                "-DGL_APICALL=__attribute__((visibility(\"default\")))"
-                "-DEGLAPI=__attribute__((visibility(\"default\")))"
-        )
-    endif()
-endif()
-
 target_include_directories(libGLESv2 PUBLIC "$<INSTALL_INTERFACE:include>")
 
 ##########
@@ -393,72 +357,20 @@ add_library(libEGL
     "src/libEGL/resource.h"
 )
 target_link_libraries(libEGL PRIVATE angle::common angle::libANGLE libGLESv2)
-target_include_directories(libEGL PUBLIC "$<INSTALL_INTERFACE:include>" "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>")
-target_compile_definitions(libEGL
-    PRIVATE -DLIBGLESV2_IMPLEMENTATION
-    PUBLIC
-        "-DGL_GLES_PROTOTYPES=1"
-        "-DGL_GLEXT_PROTOTYPES"
-        "-DEGL_EGL_PROTOTYPES=1"
-        "-DEGL_EGLEXT_PROTOTYPES"
-)
-add_library(GL_VISIBILITY INTERFACE)
-if(WIN32)
-    target_compile_definitions(GL_VISIBILITY INTERFACE
-                "-DGL_API="
-                "-DGL_APICALL=")
-else()
-    target_compile_definitions(GL_VISIBILITY INTERFACE
-                "-DGL_API=__attribute__((visibility(\"default\")))"
-                "-DGL_APICALL=__attribute__((visibility(\"default\")))")
-endif()
-target_link_libraries(libEGL PRIVATE GL_VISIBILITY)
-target_link_libraries(libGLESv2 PRIVATE GL_VISIBILITY)
-
-if(WIN32)
-    target_compile_definitions(libEGL PRIVATE
-            "-DEGLAPI="
-    )
-else()
-    target_compile_definitions(libEGL PRIVATE
-            "-DEGLAPI=__attribute__((visibility(\"default\")))"
-    )
-endif()
+target_include_directories(libEGL PUBLIC "$<INSTALL_INTERFACE:include>")
+target_include_directories(libEGL PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>")
 
-if(NOT BUILD_SHARED_LIBS)
-    add_definitions("-DANGLE_EXPORT=" "-DANGLE_UTIL_EXPORT=" "-DEGLAPI=" "-DGL_APICALL=" "-DGL_API=")
-endif()
 
 SET_TARGET_PROPERTIES(libANGLE PROPERTIES PREFIX "")
 SET_TARGET_PROPERTIES(libGLESv2 PROPERTIES PREFIX "")
 SET_TARGET_PROPERTIES(libEGL PROPERTIES PREFIX "")
 
-install(TARGETS libEGL libGLESv2 libANGLE angle_common angle_image_util angle_gpu_info_util angle_translator angle_preprocessor GL_VISIBILITY EXPORT ANGLEExport
+install(TARGETS libEGL libGLESv2 EXPORT ANGLEExport
     RUNTIME DESTINATION bin
     LIBRARY DESTINATION lib
     ARCHIVE DESTINATION lib
 )
 
-if(WINDOWS_DESKTOP)
-    install(TARGETS angle_renderer_d3d angle_renderer_win32 angle_renderer_opengl EXPORT ANGLEExport
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib
-    )
-elseif(WINDOWS_STORE)
-    install(TARGETS angle_renderer_d3d angle_renderer_winrt EXPORT ANGLEExport
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib
-    )
-else()
-    install(TARGETS angle_renderer_opengl EXPORT ANGLEExport
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib
-    )
-endif()
-
 install(EXPORT ANGLEExport FILE unofficial-angle-config.cmake NAMESPACE unofficial::angle:: DESTINATION share/unofficial-angle)
 
 if(NOT DISABLE_INSTALL_HEADERS)
diff --git a/ports/angle/CONTROL b/ports/angle/CONTROL
index 09fb30d9b..abe9234f6 100644
--- a/ports/angle/CONTROL
+++ b/ports/angle/CONTROL
@@ -1,6 +1,6 @@
-Source: angle
-Version: 2020-05-15-1
-Homepage: https://github.com/google/angle
-Description: A conformant OpenGL ES implementation for Windows, Mac and Linux.
-  The goal of ANGLE is to allow users of multiple operating systems to seamlessly run WebGL and other OpenGL ES content by translating OpenGL ES API calls to one of the hardware-supported APIs available for that platform. ANGLE currently provides translation from OpenGL ES 2.0 and 3.0 to desktop OpenGL, OpenGL ES, Direct3D 9, and Direct3D 11. Support for translation from OpenGL ES to Vulkan is underway, and future plans include compute shader support (ES 3.1) and MacOS support.
-Build-Depends: egl-registry, opengl-registry
+Source: angle
+Version: 2019-07-19-3
+Homepage: https://github.com/google/angle
+Description: A conformant OpenGL ES implementation for Windows, Mac and Linux.
+  The goal of ANGLE is to allow users of multiple operating systems to seamlessly run WebGL and other OpenGL ES content by translating OpenGL ES API calls to one of the hardware-supported APIs available for that platform. ANGLE currently provides translation from OpenGL ES 2.0 and 3.0 to desktop OpenGL, OpenGL ES, Direct3D 9, and Direct3D 11. Support for translation from OpenGL ES to Vulkan is underway, and future plans include compute shader support (ES 3.1) and MacOS support.
+Build-Depends: egl-registry
diff --git a/ports/angle/portfile.cmake b/ports/angle/portfile.cmake
index 672e5173c..241b9f9d0 100644
--- a/ports/angle/portfile.cmake
+++ b/ports/angle/portfile.cmake
@@ -1,6 +1,9 @@
-if (VCPKG_TARGET_IS_LINUX)
+include(vcpkg_common_functions)
+
+vcpkg_check_linkage(ONLY_DYNAMIC_LIBRARY)
+
+if (VCPKG_CMAKE_SYSTEM_NAME STREQUAL "Linux")
     message(WARNING "Building with a gcc version less than 6.1 is not supported.")
-    message(WARNING "${PORT} currently requires the following libraries from the system package manager:\n    libx11-dev\n    libmesa-dev\n    libxi-dev\n    libxext-dev\n\nThese can be installed on Ubuntu systems via apt-get install libx11-dev libmesa-dev libxi-dev libxext-dev.")
 endif()
 
 if (VCPKG_TARGET_ARCHITECTURE STREQUAL "x86")
@@ -9,8 +12,6 @@ elseif (VCPKG_TARGET_ARCHITECTURE STREQUAL "x64")
     set(ANGLE_CPU_BITNESS ANGLE_IS_64_BIT_CPU)
 elseif (VCPKG_TARGET_ARCHITECTURE STREQUAL "arm")
     set(ANGLE_CPU_BITNESS ANGLE_IS_32_BIT_CPU)
-elseif (VCPKG_TARGET_ARCHITECTURE STREQUAL "arm64")
-    set(ANGLE_CPU_BITNESS ANGLE_IS_64_BIT_CPU)
 else()
     message(FATAL_ERROR "Unsupported architecture: ${VCPKG_TARGET_ARCHITECTURE}")
 endif()
@@ -18,17 +19,15 @@ endif()
 vcpkg_from_github(
     OUT_SOURCE_PATH SOURCE_PATH
     REPO google/angle
-    REF d949154da428bb3e924e28a8eadfe2327631c8bb # chromium/4148
-    SHA512 3ef1c94fccfca592057652e0ad305e3025184675e2323a714428ec934048496fbd242b5e1298bb5e3b3058b53d54f6889e446cbd81af7bea2cc6d5e13c7356bd
-    # On update check headers against opengl-registry
-    PATCHES
-        001-fix-uwp.patch
-        002-fix-builder-error.patch
+    REF aa292a59f9f222535c2ff34d8eecbe3cce039664
+    SHA512 9299f40d8abaddc2f82bc45a988670e1b57cbb26993814d894fee06d6af11c5858fcca2499a34bbaf634eefa57ee1e11e9fecd72ff661218cd9c4ab1b04225d2
+    PATCHES 
+        001-fix-windows-define-far.patch
+        002_Fix_glInvalidateFramebuffer_crash.patch
 )
 
 file(COPY ${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt DESTINATION ${SOURCE_PATH})
 file(COPY ${CMAKE_CURRENT_LIST_DIR}/commit.h DESTINATION ${SOURCE_PATH})
-file(COPY ${CMAKE_CURRENT_LIST_DIR}/commit.h DESTINATION ${SOURCE_PATH}/src/common)
 
 vcpkg_configure_cmake(
     SOURCE_PATH ${SOURCE_PATH}
@@ -44,33 +43,4 @@ vcpkg_fixup_cmake_targets(CONFIG_PATH share/unofficial-angle TARGET_PATH share/u
 
 vcpkg_copy_pdbs()
 
-file(INSTALL ${SOURCE_PATH}/LICENSE DESTINATION ${CURRENT_PACKAGES_DIR}/share/${PORT} RENAME copyright)
-
-# File conflict with opengl-registry! Make sure headers are similar on Update!
-# angle defines some additional entrypoints. 
-# opengl-registry probably needs an upstream update to account for those
-# Due to that all angle headers get moved to include/angle. 
-# If you want to use those instead of the onces provided by opengl-registry make sure 
-# VCPKG_INSTALLED_DIR/include/angle is before VCPKG_INSTALLED_DIR/include
-file(GLOB_RECURSE angle_includes "${CURRENT_PACKAGES_DIR}/include")
-file(COPY ${angle_includes} DESTINATION "${CURRENT_PACKAGES_DIR}/include/angle")
-
-set(_double_files
-    include/GLES/egl.h
-    include/GLES/gl.h
-    include/GLES/glext.h
-    include/GLES/glplatform.h
-    include/GLES2/gl2.h
-    include/GLES2/gl2ext.h
-    include/GLES2/gl2platform.h
-    include/GLES3/gl3.h
-    include/GLES3/gl31.h
-    include/GLES3/gl32.h
-    include/GLES3/gl3platform.h)
-foreach(_file ${_double_files})
-    if(EXISTS "${CURRENT_PACKAGES_DIR}/${_file}")
-        file(REMOVE "${CURRENT_PACKAGES_DIR}/${_file}")
-    endif()
-endforeach()
-
-
+file(INSTALL ${SOURCE_PATH}/LICENSE DESTINATION ${CURRENT_PACKAGES_DIR}/share/angle RENAME copyright)
